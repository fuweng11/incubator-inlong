<?xml version="1.0" encoding="UTF-8"?>
<!--
    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements. See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership. The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License. You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied. See the License for the
    specific language governing permissions and limitations
    under the License.
-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="org.apache.inlong.manager.dao.mapper.tencent.DbSyncHeartbeatEntityMapper">
    <resultMap id="BaseResultMap"
        type="org.apache.inlong.manager.dao.entity.tencent.DbSyncHeartbeatEntity">
        <id column="id" jdbcType="INTEGER" property="id"/>
        <result column="instance" jdbcType="VARCHAR" property="instance"/>
        <result column="server_id" jdbcType="VARCHAR" property="serverId"/>
        <result column="current_db" jdbcType="VARCHAR" property="currentDb"/>
        <result column="url" jdbcType="VARCHAR" property="url"/>
        <result column="backup_url" jdbcType="VARCHAR" property="backupUrl"/>
        <result column="agent_status" jdbcType="VARCHAR" property="agentStatus"/>
        <result column="task_ids" jdbcType="LONGVARCHAR" property="taskIds"/>
        <result column="db_dump_index" jdbcType="BIGINT" property="dbDumpIndex"/>
        <result column="dump_position" jdbcType="VARCHAR" property="dumpPosition"/>
        <result column="max_log_position" jdbcType="LONGVARCHAR" property="maxLogPosition"/>
        <result column="error_msg" jdbcType="LONGVARCHAR" property="errorMsg"/>
        <result column="report_time" jdbcType="BIGINT" property="reportTime"/>
        <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
        <result column="modify_time" jdbcType="TIMESTAMP" property="modifyTime"/>
    </resultMap>
    <sql id="Base_Column_List">
        id, instance, server_id, current_db, url, backup_url, agent_status, task_ids,
        db_dump_index, dump_position, max_log_position, error_msg, report_time, create_time, modify_time
    </sql>

    <insert id="insert" parameterType="org.apache.inlong.manager.dao.entity.tencent.DbSyncHeartbeatEntity">
        insert into dbsync_heartbeat (id, instance, server_id,
                                      current_db, url, backup_url,
                                      agent_status, task_ids, db_dump_index,
                                      dump_position, max_log_position,
                                      error_msg, report_time)
        values (#{id,jdbcType=INTEGER}, #{instance,jdbcType=VARCHAR}, #{serverId,jdbcType=VARCHAR},
                #{currentDb,jdbcType=VARCHAR}, #{url,jdbcType=VARCHAR},
                #{backupUrl,jdbcType=VARCHAR}, #{agentStatus,jdbcType=VARCHAR},
                #{taskIds,jdbcType=LONGVARCHAR}, #{dbDumpIndex,jdbcType=BIGINT},
                #{dumpPosition,jdbcType=VARCHAR}, #{maxLogPosition,jdbcType=LONGVARCHAR},
                #{errorMsg,jdbcType=LONGVARCHAR}, #{reportTime,jdbcType=BIGINT})
    </insert>

    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List"/>
        from dbsync_heartbeat
        where id = #{id,jdbcType=INTEGER}
    </select>
    <select id="getHeartbeat" resultType="org.apache.inlong.manager.dao.entity.tencent.DbSyncHeartbeatEntity">
        select
        <include refid="Base_Column_List"/>
        from dbsync_heartbeat
        where server_id = #{serverId, jdbcType=VARCHAR}
        and find_in_set(#{taskId, jdbcType=INTEGER}, task_ids)
        order by modify_time desc
        limit 1
    </select>
    <select id="getHeartbeatByServerId" resultType="org.apache.inlong.manager.dao.entity.tencent.DbSyncHeartbeatEntity">
        select
        <include refid="Base_Column_List"/>
        from dbsync_heartbeat
        where server_id = #{serverId, jdbcType=INTEGER}
        order by modify_time desc
        limit 1
    </select>

    <update id="updateByPrimaryKey" parameterType="org.apache.inlong.manager.dao.entity.tencent.DbSyncHeartbeatEntity">
        update dbsync_heartbeat
        set instance         = #{instance,jdbcType=VARCHAR},
            server_id        = #{serverId,jdbcType=VARCHAR},
            current_db       = #{currentDb,jdbcType=VARCHAR},
            url              = #{url,jdbcType=VARCHAR},
            backup_url       = #{backupUrl,jdbcType=VARCHAR},
            agent_status     = #{agentStatus,jdbcType=VARCHAR},
            task_ids         = #{taskIds,jdbcType=LONGVARCHAR},
            db_dump_index    = #{dbDumpIndex,jdbcType=BIGINT},
            dump_position    = #{dumpPosition,jdbcType=VARCHAR},
            max_log_position = #{maxLogPosition,jdbcType=LONGVARCHAR},
            error_msg        = #{errorMsg,jdbcType=LONGVARCHAR},
            report_time      = #{reportTime,jdbcType=BIGINT}
        where id = #{id,jdbcType=INTEGER}
    </update>
    <update id="insertOrUpdateHeartbeat">
        insert into dbsync_heartbeat
        (instance, server_id,
        current_db, url,
        backup_url, agent_status,
        task_ids, db_dump_index,
        dump_position, max_log_position,
        error_msg, report_time)
        values
        <foreach collection="entityList" separator="," index="index" item="item">
            (#{item.instance, jdbcType=VARCHAR}, #{item.serverId, jdbcType=VARCHAR},
            #{item.currentDb, jdbcType=VARCHAR}, #{item.url, jdbcType=VARCHAR},
            #{item.backupUrl, jdbcType=VARCHAR}, #{item.agentStatus, jdbcType=VARCHAR},
            #{item.taskIds,jdbcType=LONGVARCHAR}, #{item.dbDumpIndex,jdbcType=BIGINT},
            #{item.dumpPosition, jdbcType=VARCHAR}, #{item.maxLogPosition, jdbcType=LONGVARCHAR},
            #{item.errorMsg, jdbcType=LONGVARCHAR}, #{item.reportTime, jdbcType=BIGINT})
        </foreach>
        ON DUPLICATE KEY UPDATE
        current_db = values(current_db),
        backup_url = values(backup_url),
        agent_status = values(agent_status),
        task_ids = values(task_ids),
        db_dump_index = values(db_dump_index),
        dump_position = values(dump_position),
        max_log_position = values(max_log_position),
        error_msg = values(error_msg),
        report_time = values(report_time)
    </update>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete
        from dbsync_heartbeat
        where id = #{id, jdbcType=INTEGER}
    </delete>
</mapper>
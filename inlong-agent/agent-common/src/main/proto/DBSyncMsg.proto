syntax="proto2";

package org.apache.inlong.agent.common.protocol;

//option java_package = "org.apache.inlong.agent.common.mysql.protocol";
option java_outer_classname = "DBSyncMsg";
option optimize_for = SPEED;

/****************************************************************
 * message model
 *如果要在Enum中新增类型，确保以前的类型的下标值不变.
 ****************************************************************/
 
/**每个字段的数据结构**/
message Column {
	/**字段下标**/
	optional int32		index			= 1;
	
	/** 字段类型 **/
	optional int32 		sqlType		= 2;
	
	/**字段名称(忽略大小写)，在mysql中是没有的**/
	optional string		name			=	3;
	
	/**是否是主键**/
	optional bool 		isKey			= 4;
	
	/**如果EventType=UPDATE,用于标识这个字段值是否有修改**/
	optional bool			updated		= 5;
	
	/** 标识是否为空  **/
	optional bool			isNull		= 6 [default = false];
	
	/**预留扩展**/
	repeated Pair			props			=	7;
	
	/** 字段值,timestamp,Datetime是一个时间格式的文本 **/
	optional string		value			= 8;
	
	/** 对应数据对象原始长度 **/
	optional int32		length		= 9;
}

 message RowData {

	/** 字段信息，增量数据(修改前,删除前) **/
	repeated Column			beforeColumns  	= 1;

	/** 字段信息，增量数据(修改后,新增后)  **/
	repeated Column			afterColumns	  = 2;
	
	/**预留扩展**/
	repeated Pair			  props			    	=	3;

	/** 变更数据所属的实例名，ip:port  **/
	optional string     instanceName    = 4;
	
	/** 变更数据的schemaName **/
	optional string     schemaName      = 5;
	
	/** 变更数据的tableName **/
	optional string     tableName       = 6;
	
	/** 变更数据的类型  **/
	optional EventType 	eventType		    = 7 [default = UPDATE];
	
	/**变更数据的执行时间 **/
	optional int64			executeTime		  = 8;
	
	/** 变更发生的序号  **/
	optional int64			executeOrder	  = 9;

	 /** 变更发生的序号  **/
	 optional string			transferIp	  = 10;
}
 
 /**预留扩展**/
message Pair{
	optional string 		key				= 			1;	
	optional string 		value			= 			2;	
}
 
 /** 事件类型 **/
enum EventType {
    INSERT 		= 		1;
    UPDATE 		= 		2;
    DELETE 		= 		3;
    CREATE		= 		4;
    ALTER		  = 		5;
    ERASE		  = 		6;
    QUERY		  =		  7;
    GTID      =     8;
}